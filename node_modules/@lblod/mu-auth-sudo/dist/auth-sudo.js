'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.updateSudo = exports.querySudo = undefined;

var _expressHttpContext = require('express-http-context');

var _expressHttpContext2 = _interopRequireDefault(_expressHttpContext);

var _sparqlClient = require('sparql-client-2');

var _envVar = require('env-var');

var _envVar2 = _interopRequireDefault(_envVar);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var LOG_SPARQL_QUERIES = process.env.LOG_SPARQL_QUERIES != undefined ? _envVar2.default.get('LOG_SPARQL_QUERIES').asBool() : _envVar2.default.get('LOG_SPARQL_ALL').asBool();
var LOG_SPARQL_UPDATES = process.env.LOG_SPARQL_UPDATES != undefined ? _envVar2.default.get('LOG_SPARQL_UPDATES').asBool() : _envVar2.default.get('LOG_SPARQL_ALL').asBool();
var DEBUG_AUTH_HEADERS = _envVar2.default.get('DEBUG_AUTH_HEADERS').asBool();

function sudoSparqlClient() {
  var extraHeaders = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  var options = {
    requestDefaults: {
      headers: {
        'mu-auth-sudo': 'true'
      }
    }
  };

  if (_expressHttpContext2.default.get('request')) {
    options.requestDefaults.headers['mu-session-id'] = _expressHttpContext2.default.get('request').get('mu-session-id');
    options.requestDefaults.headers['mu-call-id'] = _expressHttpContext2.default.get('request').get('mu-call-id');
  }

  if (extraHeaders) {
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      for (var _iterator = Object.keys(extraHeaders)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        var key = _step.value;

        options.requestDefaults.headers[key] = extraHeaders[key];
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator.return) {
          _iterator.return();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }
  }

  if (DEBUG_AUTH_HEADERS) {
    console.log('Headers set on SPARQL client: ' + JSON.stringify(options));
  }
  return new _sparqlClient.SparqlClient(process.env.MU_SPARQL_ENDPOINT, options);
}

function executeRawQuery(queryString) {
  var extraHeaders = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  return sudoSparqlClient(extraHeaders).query(queryString).executeRaw().then(function (response) {
    function maybeParseJSON(body) {
      // Catch invalid JSON
      try {
        return JSON.parse(body);
      } catch (ex) {
        return null;
      }
    }

    return maybeParseJSON(response.body);
  });
}

function querySudo(queryString) {
  var extraHeaders = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  if (LOG_SPARQL_QUERIES) {
    console.log(queryString);
  }
  return executeRawQuery(queryString);
}

function updateSudo(queryString) {
  if (LOG_SPARQL_UPDATES) {
    console.log(queryString);
  }
  return executeRawQuery(queryString);
}

var _exports = {
  querySudo: querySudo,
  updateSudo: updateSudo
};

exports.default = _exports;
exports.querySudo = querySudo;
exports.updateSudo = updateSudo;